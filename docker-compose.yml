version: '3'

services:
  api1: # API - Instância 01
    image: ftsuda/rinha-backend:1.1.5
    hostname: api1
    depends_on:
      db:
        condition: 'service_healthy'
      cache:
        condition: 'service_healthy'
    networks:
      - rinhanet
    # healthcheck:
    #   test: curl -m 5 --silent --fail --request GET http://localhost:8081/contagem-pessoas | jq --exit-status -n 'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
    #   interval: 15s
    #   retries: 60
    #   start_period: 30s
    #   timeout: 5s
    # expose:
    #   - "8080"
    ports:
      - "8081:8080"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    environment:
      INSTANCIA_ROLE: "principal"
      JDK_JAVA_OPTIONS: "-server -ea -XX:+UseContainerSupport -XX:MaxRAMPercentage=80 -XX:+UseCompressedClassPointers -XX:+UseZGC -XX:+ZUncommit -XX:+UseDynamicNumberOfGCThreads -XX:-OmitStackTraceInFastThrow -XX:+OptimizeStringConcat"
      # JDK_JAVA_OPTIONS: "-server -ea -XX:+UseContainerSupport -XX:MaxRAMPercentage=80 -XX:+UseParallelGC"
      DB_URL: "r2dbc:postgresql://db:5432/rinha"
      DB_USER: "rinha_user"
      DB_PWD: "rinha_pwd"
      DB_POOL_INITIAL_SIZE: "99"
      DB_POOL_MAX_SIZE: "99"
      REDIS_HOST: "cache"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '1GB'

  api2: # API - Instância 02
    image: ftsuda/rinha-backend:1.1.5
    hostname: api2
    depends_on:
      db:
        condition: 'service_healthy'
      cache:
        condition: 'service_healthy'
    networks:
      - rinhanet
    # healthcheck:
    #   test: curl -m 5 --silent --fail --request GET http://localhost:8082/contagem-pessoas | jq --exit-status -n 'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
    #   interval: 15s
    #   retries: 60
    #   start_period: 30s
    #   timeout: 5s
    # expose:
    #   - "8080"
    ports:
      - "8082:8080"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    environment:
      INSTANCIA_ROLE: "secundaria"
      JDK_JAVA_OPTIONS: "-server -ea -XX:+UseContainerSupport -XX:MaxRAMPercentage=80 -XX:+UseCompressedClassPointers -XX:+UseZGC -XX:+ZUncommit -XX:+UseDynamicNumberOfGCThreads -XX:-OmitStackTraceInFastThrow -XX:+OptimizeStringConcat"
      # JDK_JAVA_OPTIONS: "-server -ea -XX:+UseContainerSupport -XX:MaxRAMPercentage=80 -XX:+UseParallelGC"
      DB_URL: "r2dbc:postgresql://db:5432/rinha"
      DB_USER: "rinha_user"
      DB_PWD: "rinha_pwd"
      DB_POOL_INITIAL_SIZE: "99"
      DB_POOL_MAX_SIZE: "99"
      REDIS_HOST: "cache"
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '1GB'

  nginx: # Load Balancer
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
      # api1:
      #   condition: 'service_healthy'
      # api2:
      #   condition: 'service_healthy'
    networks:
      - rinhanet
    ports:
      - "9999:9999"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: '0.3GB'

  db: # Banco de dados
    image: postgres
    command: postgres -c config_file=/postgresql.conf
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgresql.conf:/postgresql.conf
    environment:
      POSTGRES_DB: "rinha"
      POSTGRES_USER: "rinha_user"
      POSTGRES_PASSWORD: "rinha_pwd"
    # expose:
    #   - "5432"
    ports:
      - "5434:5432"
    networks:
      - rinhanet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d rinha -U rinha_user"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: '0.5GB'

  cache:
    image: redis:latest
    command: ["redis-server", "--appendonly", "no", "--maxclients", "20000", "--save", "''"]
    # ports:
    #   - '6379:6379'
    networks:
      - rinhanet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 20
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '0.2GB'
          
networks:
  rinhanet:
    driver: bridge